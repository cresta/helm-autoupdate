name: Build and test code

on:
  push:
    tags:
      - v*
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build/release
    runs-on: ubuntu-latest
    steps:
      - name: Check out code # Required for dockerfile content
        uses: actions/checkout@v3
      - name: Set up Docker Buildx # Required for build cache
        uses: docker/setup-buildx-action@v2
      - name: Install Go # Required for running 'go test'
        uses: actions/setup-go@v3
        with:
          go-version-file: 'go.mod'
      - name: golangci-lint # Required for linting
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
      - name: Build # Verify the build works.  -mod=readonly is required to validate the go.mod/go.sum files
        run: go build -mod=readonly ./cmd/helm-autoupdate/main.go
      - name: Verify # Check that the go.mod/go.sum files are hash-identical to the ones in the repo
        run: go mod verify
      - name: Test # Run the tests
        run: go test -v ./...
      - name: Login to GitHub Container Registry # Required for pushing to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Docker meta # Gives us fun and usable tags for the docker image
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/cresta/helm-autoupdate
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
      - name: Build and push # Build/push docker image for use in this action
        uses: docker/build-push-action@v3
        with:
          context: .
          push: ${{ github.ref == 'refs/heads/main' || github.ref_type == 'tag' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
